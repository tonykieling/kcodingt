{"version":3,"sources":["components/Sysheader.js","components/Home.js","components/Lands.js","components/Login.js","components/Register.js","components/Error.js","App.js","serviceWorker.js","components/store/localStorage.js","components/store/reducer.js","components/store/store.js","index.js"],"names":["Navega","logout","window","confirm","_this","props","noUser","loggedHeader","react_default","a","createElement","Navbar","bg","Brand","href","Nav","react_router_dom","to","className","storeEmail","Button","onClick","notLoggedHeader","variant","this","Component","connect","store","email","storeUserAdmin","userAdmin","storePictureName","pictureName","dispatch","type","Home","Card","Header","Form","Group","as","Row","controlId","Label","column","sm","Col","storeId","storeName","storePhone","id","name","phone","Lands","Login","state","password","errorMsg","handleChange","e","setState","Object","defineProperty","target","value","key","textInput2","focus","handleSubmit","event","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","resJSON","user","dispatchLogin","message","textInput1","clearMsg","catch","error","console","setTimeout","_this2","onSubmit","Control","autoFocus","placeholder","onChange","onKeyPress","ref","input","Text","Container","data","Register","confirmPassword","redirectFlag","btnType","undefined","textInput3","parseInt","alert","textInput4","textInput5","length","clearMessage","react_router","Error","App","Sysheader","exact","path","render","components_Home","Lands_Lands","components_Login","component","Boolean","location","hostname","match","getUser","localStorage","getItem","err","initialState","reducer","arguments","action","newState","objectSpread","setItem","saveState","removeItem","persistedData","createStore","subscribe","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9be88d5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar, Nav, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { Link } from \"react-router-dom\";\n\nclass Navega extends Component {\n\n  logout = () => {\n    if (window.confirm(\"Are you sure you wanna leave?\"))\n      this.props.noUser()\n  }\n\n\n  loggedHeader = () => {\n      return (\n        <Navbar bg=\"primary\" >\n          <Navbar.Brand href=\"/\">KcodingT</Navbar.Brand>\n          <Nav>\n            <Link to=\"/\" className=\"nav-link\">{this.props.storeEmail} is logged</Link>\n            <Button onClick={this.logout} className=\"logoutBtn\">Logout</Button>\n          </Nav>\n        </Navbar>\n      )\n  }\n\n\n  notLoggedHeader = () => {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">KCodingT</Navbar.Brand>\n        <Nav>\n          <Link to=\"/login\" className=\"nav-link\">Login</Link>\n          <Link to=\"/register\" className=\"nav-link\">Register</Link>\n        </Nav>\n      </Navbar>\n    )\n  }\n\n\n  render() {\n    return(this.props.storeEmail ?\n            this.loggedHeader() :\n            this.notLoggedHeader()\n          );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    storeEmail        : store.email,\n    storeUserAdmin    : store.userAdmin,\n    storePictureName  : store.pictureName\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    noUser: () => dispatch({type:\"LOGOUT\"})\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navega);\n","import React, { Component } from 'react';\nimport { Card, Form, Col, Row} from 'react-bootstrap';\nimport { connect } from 'react-redux'\n\n\nclass Home extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"htitle\">User's Home Page</h1>\n        <h3>Welcome {this.props.storeEmail} </h3> \n        <br></br>\n\n        <Card>\n          <Card.Header className=\"cardTitle\">User Information</Card.Header>\n          <Form>\n            <Form.Group as={Row} controlId=\"formName\">\n              <Form.Label column sm={1} className=\"card-label\">Id:</Form.Label>\n              <Col sm={10}>\n                <Form.Label column sm={10} >{this.props.storeId}</Form.Label>\n              </Col>\n            </Form.Group>\n          </Form>\n          <Form>\n            <Form.Group as={Row} controlId=\"formName\">\n              <Form.Label column sm={1} className=\"card-label\">Name:</Form.Label>\n              <Col sm={10}>\n                <Form.Label column sm={10} >{this.props.storeName}</Form.Label>\n              </Col>\n            </Form.Group>\n          </Form>\n          <Form>\n            <Form.Group as={Row} controlId=\"formName\">\n              <Form.Label column sm={1} className=\"card-label\">Email:</Form.Label>\n              <Col sm={10}>\n                <Form.Label column sm={10} >{this.props.storeEmail}</Form.Label>\n              </Col>\n            </Form.Group>\n          </Form>\n          <Form>\n            <Form.Group as={Row} controlId=\"formName\">\n              <Form.Label column sm={1} className=\"card-label\">Phone:</Form.Label>\n              <Col sm={10}>\n                <Form.Label column sm={10} >{this.props.storePhone}</Form.Label>\n              </Col>\n            </Form.Group>\n          </Form>\n        </Card>        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    storeId     : store.id,\n    storeEmail  : store.email,\n    storeName   : store.name,\n    storePhone  : store.phone\n  }\n}\n\nexport default connect(mapStateToProps, null)(Home)\n","import React, { Component } from 'react'\nimport { Card } from 'react-bootstrap'\n\nexport default class Lands extends Component {\n  render() {\n    return (\n      <div className=\"moldura\">\n\n        <h1>Landscape Page</h1>\n        <Card className=\"homePage twothirds\">\n          <div className=\"ipsumText\">\n            <p>Random text over here.</p>\n            <p>Random text over here.</p>\n            <p>Random text over here.</p>\n            <p>Random text over here.</p>\n          </div>\n        </Card>\n    </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, Form, Card, Container } from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\nclass Login extends Component {\n\n    state = {\n      email         : \"\",\n      password      : \"\",\n      errorMsg      : \"\"\n    }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n    \n    if (e.key === \"Enter\" && this.state.email !== \"\") {\n      if (e.target.name === \"email\")\n        this.textInput2.focus();\n    }\n  }\n\n\n  handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.email !== \"\" && this.state.password !== \"\") {\n        const url = \"/login\"; // if the fetch is being made to the same machine, just consider the API place.\n        // const url = \"http://localhost:3333/login\";   // dev setting\n        // const url = window.location.origin + \"/login\";\n        fetch( url, {  \n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ \n                email     : this.state.email,\n                password  : this.state.password\n              })\n        })\n        .then(response => response.json())\n        .then((resJSON) => {\n          if ('name' in resJSON){\n            const user = resJSON;\n            this.props.dispatchLogin({user})\n          }\n          else if ( 'message' in resJSON){\n            this.setState({\n              errorMsg  : resJSON.message,\n              email     : \"\",\n              password  : \"\"\n            });\n\n            // when login fails, it focus in the email field\n            this.textInput1.focus();\n\n            //it clears the error message after 3.5s\n            this.clearMsg();\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n          this.setState({errorMsg: error.message});\n          this.clearMsg();\n        })\n      }\n  }\n\n  clearMsg = () => {\n    setTimeout(() => {\n      this.setState({\n        errorMsg: \"\"\n      })\n    }, 3500);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Login Page</h1>\n        <Card>\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>User's Email</Form.Label>\n              <Form.Control\n                autoFocus   = {true}\n                type        = \"email\"\n                placeholder = \"Type the user's email\"\n                name        = \"email\"\n                onChange    = {this.handleChange}\n                onKeyPress  = {this.handleChange}\n                value       = {this.state.email}\n                ref         = {input => this.textInput1 = input }\n                />\n              <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type        = \"password\"\n                placeholder = \"Password\"\n                name        = \"password\"\n                value       = {this.state.password}\n                onChange    = {this.handleChange}\n                onKeyPress  = {this.handleChange}\n                ref         = {input => this.textInput2 = input }\n              />\n              {/* <p id=\"errorMsg\">{ this.state.errorMsg }</p> */}\n            </Form.Group>\n            \n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n            <Container className=\"msgcolor\">\n              {this.state.errorMsg}\n            </Container>\n          </Form>\n          </Card>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchLogin: user => dispatch({type:\"LOGIN\", data: user })\n  }\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { Button, Form, Card, Container } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nclass Register extends Component {\n\n  state = {\n      name            : \"\",\n      email           : \"\",\n      phone           : \"\",\n      password        : \"\",\n      confirmPassword : \"\",\n      redirectFlag    : false,\n      errorMsg        : \"\",\n      btnType         : undefined\n    }\n\n  handleChange = e => {\n    if (e.key === \"Enter\")\n      switch(e.target.name) {\n        case \"name\":\n          if (this.state.name !== \"\")\n            this.textInput2.focus();\n          break;\n        case \"email\":\n          if (this.state.email !== \"\")\n            this.textInput3.focus();\n          break;\n        case \"phone\":\n          if (!parseInt(e.target.value) && e.target.value !== \"\") {\n            alert(\"Phone should have only numbers.\");\n            break;\n          }\n          this.textInput4.focus();\n          break;\n        case \"password\":\n          if (this.state.password !== \"\")\n            this.textInput5.focus();\n          break;\n        case \"confirmPassword\":\n          if (this.state.confirmPassword !== \"\")\n            this.setState({ btnType: \"submit\" });\n          break;\n        default:                     \n      }\n\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (this.state.phone.length > 10){\n      alert(`Phone's Maximum length is\n                10 numbers!`)\n      this.textInput3.focus();\n    } else if (!parseInt(this.state.phone) && this.state.phone !== \"\") {\n      alert(\"Phone should have only numbers.\");\n      this.textInput3.focus();\n    } else if (this.state.name.length > 60) {\n      alert(\"Name's maximun length is 60 characters.\");\n      this.textInput1.focus();\n    } else if (this.state.email.length > 60) {\n      alert(\"Email's maximun length is 60 characters.\");\n      this.textInput2.focus();\n    } else if (this.state.email !== \"\" && this.state.name !== \"\" && this.state.password !== \"\" && this.state.confirmPassword !== \"\") {\n      if (this.state.password !== this.state.confirmPassword) {\n        alert(\"Password and \\nConfirm Password fields\\n\\nMUST be the same.\");\n        this.setState({\n          password        : \"\",\n          confirmPassword : \"\"\n        })\n        this.textInput4.focus();\n      } else {\n        const url = \"/user/new\";\n        // const url = window.location.origin + \"/user/new\";\n        // const url = \"http://localhost:3333/user/new\";    // this is dev setting\n        fetch( url, {  \n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ \n                name      : this.state.name,\n                email     : this.state.email,\n                password  : this.state.password,\n                phone     : this.state.phone\n              })\n        })\n          .then(response => response.json())\n          .then((resJSON) => {\n            if ('name' in resJSON){\n              const user = {\n                id          : resJSON.id,\n                name        : resJSON.name,\n                email       : resJSON.email,\n                phone       : resJSON.phone\n              }; \n              this.props.dispatchLogin({user});\n              this.setState({\n                redirectFlag: true\n              });\n            }\n            else if ( 'message' in resJSON){\n              this.setState({errorMsg: resJSON.message});  \n              this.clearMessage();\n            }\n          })\n          .catch((error) => {\n            console.error(error);\n            this.setState({errorMsg: error.message});\n          })\n      }\n    }\n  }\n\n\n  //it clears the error message after 3.5s\n  clearMessage = () => {\n    setTimeout(() => {\n      this.setState({\n        errorMsg        : \"\",\n        password        : \"\",\n        confirmPassword : \"\"\n      })\n      this.textInput1.focus();\n    }, 3500);\n\n  }\n\n  render() {\n\n    if (this.state.redirectFlag)\n      return(<Redirect to=\"/\" />);\n\n    return (\n      <div>\n        <h1>Register Page</h1>\n        <Card>\n          <Form onSubmit={this.handleSubmit}>\n\n            <Form.Group controlId=\"formName\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                autoFocus   = {true}\n                type        = \"text\"\n                placeholder = \"Type the user's name\"\n                name        = \"name\"\n                onChange    = {this.handleChange}\n                value       = {this.state.name}\n                onKeyPress  = {this.handleChange}\n                ref         = {input => this.textInput1 = input }\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control\n                type        = \"email\"\n                placeholder = \"Type the user's email\"\n                name        = \"email\"\n                onChange    = {this.handleChange}\n                value       = {this.state.email}\n                onKeyPress  = {this.handleChange}\n                ref         = {input => this.textInput2 = input }\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Phone number</Form.Label>\n              <Form.Control\n                type        = \"tel\"\n                placeholder = \"Type the user's phone (optional)\"\n                name        = \"phone\"\n                onChange    = {this.handleChange}\n                value       = {this.state.phone}\n                onKeyPress  = {this.handleChange}\n                ref         = {input => this.textInput3 = input }\n              />\n            </Form.Group>            \n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type        = \"password\"\n                placeholder = \"Password\"\n                name        = \"password\"\n                onChange    = {this.handleChange}\n                value       = {this.state.password}\n                onKeyPress  = {this.handleChange}\n                ref         = {input => this.textInput4 = input }\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formConfirmPassword\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control\n                type        = \"password\"\n                placeholder = \"Confirm Password\"\n                name        = \"confirmPassword\"\n                onChange    = {this.handleChange}\n                value       = {this.state.confirmPassword}\n                onKeyPress  = {this.handleChange}\n                ref         = {input => this.textInput5 = input }\n                />\n            </Form.Group>\n\n            <Button variant=\"primary\" type={this.state.btnType}>\n              Submit\n            </Button>\n            <Container className=\"msgcolor\">\n              {this.state.errorMsg}\n            </Container>\n          </Form>\n          </Card>\n      </div>\n    )\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchLogin: user => dispatch({type:\"LOGIN\", data: user })\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Register)\n","import React from 'react'\n\nexport default function Error() {\n  return (\n    <div className=\"moldura\">\n      <h1>Error 404 - Page doesn't exist!</h1>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport './App.css';\n\nimport { connect } from 'react-redux';\nimport Sysheader  from './components/Sysheader';\nimport Home       from './components/Home';\nimport Lands      from './components/Lands';\nimport Login      from './components/Login';\nimport Register   from './components/Register';\nimport Error      from \"./components/Error\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Sysheader />\n          <Switch>\n            <Route exact path=\"/\"\n              render = {() => {\n                if(this.props.storeEmail)\n                  return <Home />\n                else\n                  return <Lands />\n              }} />\n\n            <Route exact path=\"/lands\"\n              render = {() => {\n                if(this.props.storeEmail)\n                  return <Home />\n                else\n                  return <Lands />\n              }} />\n            \n            <Route path=\"/login\"\n              render={() => {\n                if (!this.props.storeEmail)\n                  return <Login />\n                else\n                  return <Redirect to=\"/\"/>\n              }} />\n\n            <Route path=\"/register\" component={Register} />\n\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    storeEmail: store.email\n  }\n}\n\nexport default connect(mapStateToProps, null)(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// this module allows persist the data in localStorage and keep the data among different browser tabs, and after the user rebooting the system, as well. That said, data is kept in the browser localstorage.\n\nexport const getUser = () => {\n  try {\n    const user = {\n      id          : localStorage.getItem('id'),\n      name        : localStorage.getItem('name'),\n      email       : localStorage.getItem('email'),\n      phone       : localStorage.getItem(\"phone\")\n    }\n    return(user ? user : undefined);\n\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport const saveState = user => {\n  try {\n    localStorage.setItem('id', user.id);\n    localStorage.setItem('email', user.email);\n    localStorage.setItem('name', user.name);\n    localStorage.setItem('phone', user.phone);\n\n  } catch (err) {\n    return err.message;\n  }\n}\n\nexport const clearUserLS = () => {\n  localStorage.removeItem('id');\n  localStorage.removeItem('name');\n  localStorage.removeItem('email');\n  localStorage.removeItem(\"phone\");\n}\n","import { saveState, clearUserLS } from './localStorage.js'\n\nconst initialState = {}\n\nconst reducer = (state = initialState, action) => {\n  let newState = {...state};\n  if (action.type === \"LOGIN\") {\n    newState = {...state,\n      id          : action.data.user.id,\n      email       : action.data.user.email,\n      name        : action.data.user.name,\n      phone       : action.data.user.phone\n    };\n    saveState(newState);\n\n  } else if (action.type === \"LOGOUT\") {\n    newState = {\n      id          : undefined,\n      email       : undefined,\n      name        : undefined,\n      phone       : undefined\n    };\n    clearUserLS();\n  }\n  \n  return newState;\n}\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport reducer from './reducer.js';\nimport { getUser } from './localStorage.js';\n\nconst persistedData = {\n  id          : getUser().id,\n  email       : getUser().email,\n  name        : getUser().name,\n  phone       : getUser().phone\n}\n\nconst store = createStore(\n  reducer,\n  persistedData );\n\nstore.subscribe(() => {\n  // console.log(\"store.subscribe- \", store.getState())\n})\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './components/store/store.js';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}